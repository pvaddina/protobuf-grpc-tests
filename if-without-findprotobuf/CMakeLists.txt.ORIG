cmake_minimum_required(VERSION 3.9 FATAL_ERROR)
project(dummy-interface-with-static-target)

set(Protobuf_LIBRARIES "C:/Users/praka/workspace/cpp/third_party/install/lib")
set(Protobuf_INCLUDE_DIR "C:/Users/praka/workspace/cpp/third_party/install/include")
set(Protobuf_PROTOC_EXECUTABLE "C:/Users/praka/workspace/cpp/third_party/install/bin/protoc.exe")
set(Protobuf_USE_STATIC_LIBS ON)

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")

find_package(Protobuf REQUIRED)
if (NOT Protobuf_FOUND)
  message(FATAL_ERROR "######################### Package Protobuf is not found")
endif()

set( OUTPUT_DIRECTORY if )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${OUTPUT_DIRECTORY}")
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${OUTPUT_DIRECTORY}")
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${OUTPUT_DIRECTORY}")
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${OUTPUT_DIRECTORY}")
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${OUTPUT_DIRECTORY}")
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${OUTPUT_DIRECTORY}")


set(SOURCES base.proto dht.proto)

include_directories(${Protobuf_INCLUDE_DIRS})
include_directories(${CMAKE_CURRENT_BINARY_DIR})
set_SOURCE_FILES_PROPERTIES(${PROTO_SRCS} ${PROTO_HDRS} PROPERTIES GENERATED TRUE)

protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${SOURCES})

add_library(if_target STATIC ${PROTO_SRCS} ${PROTO_HDRS})

#get_target_property(lib_path if_target LOCATION)
#message (STATUS "Library location== ${lib_path}")
#message (STATUS "Library location== ${LOCATION_${CMAKE_BUILD_TYPE}}")

#set(GEN_FILES ${PROTO_SRCS} ${PROTO_HDRS}
#configure_file(<output> COPYONLY)
message (STATUS "Current Location == ${CMAKE_CURRENT_BINARY_DIR}")

set (GEN_SRCS ${PROTO_SRCS} ${PROTO_HDRS})
#[[
add_custom_command(OUTPUT ${GEN_SRCS}
  COMMAND ${CMAKE_COMMAND} -E echo ${GEN_SRRCS}
  WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
  COMMENT "Echoing something"
  VERBATIM
)

add_custom_target(echo_target DEPENDS ${GEN_SRCS})
]]

