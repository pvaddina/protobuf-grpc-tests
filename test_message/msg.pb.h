// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_INCLUDED_msg_2eproto
#define PROTOBUF_INCLUDED_msg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_2eproto 

namespace protobuf_msg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_2eproto
class CSensorInitReq;
class CSensorInitReqDefaultTypeInternal;
extern CSensorInitReqDefaultTypeInternal _CSensorInitReq_default_instance_;
class Defs;
class DefsDefaultTypeInternal;
extern DefsDefaultTypeInternal _Defs_default_instance_;
namespace google {
namespace protobuf {
template<> ::CSensorInitReq* Arena::CreateMaybeMessage<::CSensorInitReq>(Arena*);
template<> ::Defs* Arena::CreateMaybeMessage<::Defs>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Defs_PowerState {
  Defs_PowerState_INVALID = 0,
  Defs_PowerState_OFF = 1,
  Defs_PowerState_ON = 2,
  Defs_PowerState_Defs_PowerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Defs_PowerState_Defs_PowerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Defs_PowerState_IsValid(int value);
const Defs_PowerState Defs_PowerState_PowerState_MIN = Defs_PowerState_INVALID;
const Defs_PowerState Defs_PowerState_PowerState_MAX = Defs_PowerState_ON;
const int Defs_PowerState_PowerState_ARRAYSIZE = Defs_PowerState_PowerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Defs_PowerState_descriptor();
inline const ::std::string& Defs_PowerState_Name(Defs_PowerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Defs_PowerState_descriptor(), value);
}
inline bool Defs_PowerState_Parse(
    const ::std::string& name, Defs_PowerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Defs_PowerState>(
    Defs_PowerState_descriptor(), name, value);
}
enum Defs_MeasType {
  Defs_MeasType_TEMPERATURE = 0,
  Defs_MeasType_HUMIDITY = 1,
  Defs_MeasType_TEMPERATURE_AND_HUMIDITY = 2,
  Defs_MeasType_Defs_MeasType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Defs_MeasType_Defs_MeasType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Defs_MeasType_IsValid(int value);
const Defs_MeasType Defs_MeasType_MeasType_MIN = Defs_MeasType_TEMPERATURE;
const Defs_MeasType Defs_MeasType_MeasType_MAX = Defs_MeasType_TEMPERATURE_AND_HUMIDITY;
const int Defs_MeasType_MeasType_ARRAYSIZE = Defs_MeasType_MeasType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Defs_MeasType_descriptor();
inline const ::std::string& Defs_MeasType_Name(Defs_MeasType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Defs_MeasType_descriptor(), value);
}
inline bool Defs_MeasType_Parse(
    const ::std::string& name, Defs_MeasType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Defs_MeasType>(
    Defs_MeasType_descriptor(), name, value);
}
// ===================================================================

class Defs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Defs) */ {
 public:
  Defs();
  virtual ~Defs();

  Defs(const Defs& from);

  inline Defs& operator=(const Defs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Defs(Defs&& from) noexcept
    : Defs() {
    *this = ::std::move(from);
  }

  inline Defs& operator=(Defs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Defs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Defs* internal_default_instance() {
    return reinterpret_cast<const Defs*>(
               &_Defs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Defs* other);
  friend void swap(Defs& a, Defs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Defs* New() const final {
    return CreateMaybeMessage<Defs>(NULL);
  }

  Defs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Defs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Defs& from);
  void MergeFrom(const Defs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Defs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Defs_PowerState PowerState;
  static const PowerState INVALID =
    Defs_PowerState_INVALID;
  static const PowerState OFF =
    Defs_PowerState_OFF;
  static const PowerState ON =
    Defs_PowerState_ON;
  static inline bool PowerState_IsValid(int value) {
    return Defs_PowerState_IsValid(value);
  }
  static const PowerState PowerState_MIN =
    Defs_PowerState_PowerState_MIN;
  static const PowerState PowerState_MAX =
    Defs_PowerState_PowerState_MAX;
  static const int PowerState_ARRAYSIZE =
    Defs_PowerState_PowerState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PowerState_descriptor() {
    return Defs_PowerState_descriptor();
  }
  static inline const ::std::string& PowerState_Name(PowerState value) {
    return Defs_PowerState_Name(value);
  }
  static inline bool PowerState_Parse(const ::std::string& name,
      PowerState* value) {
    return Defs_PowerState_Parse(name, value);
  }

  typedef Defs_MeasType MeasType;
  static const MeasType TEMPERATURE =
    Defs_MeasType_TEMPERATURE;
  static const MeasType HUMIDITY =
    Defs_MeasType_HUMIDITY;
  static const MeasType TEMPERATURE_AND_HUMIDITY =
    Defs_MeasType_TEMPERATURE_AND_HUMIDITY;
  static inline bool MeasType_IsValid(int value) {
    return Defs_MeasType_IsValid(value);
  }
  static const MeasType MeasType_MIN =
    Defs_MeasType_MeasType_MIN;
  static const MeasType MeasType_MAX =
    Defs_MeasType_MeasType_MAX;
  static const int MeasType_ARRAYSIZE =
    Defs_MeasType_MeasType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MeasType_descriptor() {
    return Defs_MeasType_descriptor();
  }
  static inline const ::std::string& MeasType_Name(MeasType value) {
    return Defs_MeasType_Name(value);
  }
  static inline bool MeasType_Parse(const ::std::string& name,
      MeasType* value) {
    return Defs_MeasType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Defs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSensorInitReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSensorInitReq) */ {
 public:
  CSensorInitReq();
  virtual ~CSensorInitReq();

  CSensorInitReq(const CSensorInitReq& from);

  inline CSensorInitReq& operator=(const CSensorInitReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSensorInitReq(CSensorInitReq&& from) noexcept
    : CSensorInitReq() {
    *this = ::std::move(from);
  }

  inline CSensorInitReq& operator=(CSensorInitReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSensorInitReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSensorInitReq* internal_default_instance() {
    return reinterpret_cast<const CSensorInitReq*>(
               &_CSensorInitReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CSensorInitReq* other);
  friend void swap(CSensorInitReq& a, CSensorInitReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSensorInitReq* New() const final {
    return CreateMaybeMessage<CSensorInitReq>(NULL);
  }

  CSensorInitReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSensorInitReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSensorInitReq& from);
  void MergeFrom(const CSensorInitReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSensorInitReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .Defs.PowerState power = 2;
  void clear_power();
  static const int kPowerFieldNumber = 2;
  ::Defs_PowerState power() const;
  void set_power(::Defs_PowerState value);

  // .Defs.MeasType measType = 3;
  void clear_meastype();
  static const int kMeasTypeFieldNumber = 3;
  ::Defs_MeasType meastype() const;
  void set_meastype(::Defs_MeasType value);

  // @@protoc_insertion_point(class_scope:CSensorInitReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int power_;
  int meastype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Defs

// -------------------------------------------------------------------

// CSensorInitReq

// string name = 1;
inline void CSensorInitReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CSensorInitReq::name() const {
  // @@protoc_insertion_point(field_get:CSensorInitReq.name)
  return name_.GetNoArena();
}
inline void CSensorInitReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSensorInitReq.name)
}
#if LANG_CXX11
inline void CSensorInitReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSensorInitReq.name)
}
#endif
inline void CSensorInitReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSensorInitReq.name)
}
inline void CSensorInitReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSensorInitReq.name)
}
inline ::std::string* CSensorInitReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CSensorInitReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSensorInitReq::release_name() {
  // @@protoc_insertion_point(field_release:CSensorInitReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSensorInitReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CSensorInitReq.name)
}

// .Defs.PowerState power = 2;
inline void CSensorInitReq::clear_power() {
  power_ = 0;
}
inline ::Defs_PowerState CSensorInitReq::power() const {
  // @@protoc_insertion_point(field_get:CSensorInitReq.power)
  return static_cast< ::Defs_PowerState >(power_);
}
inline void CSensorInitReq::set_power(::Defs_PowerState value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:CSensorInitReq.power)
}

// .Defs.MeasType measType = 3;
inline void CSensorInitReq::clear_meastype() {
  meastype_ = 0;
}
inline ::Defs_MeasType CSensorInitReq::meastype() const {
  // @@protoc_insertion_point(field_get:CSensorInitReq.measType)
  return static_cast< ::Defs_MeasType >(meastype_);
}
inline void CSensorInitReq::set_meastype(::Defs_MeasType value) {
  
  meastype_ = value;
  // @@protoc_insertion_point(field_set:CSensorInitReq.measType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Defs_PowerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Defs_PowerState>() {
  return ::Defs_PowerState_descriptor();
}
template <> struct is_proto_enum< ::Defs_MeasType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Defs_MeasType>() {
  return ::Defs_MeasType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_2eproto
