// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef PROTOBUF_INCLUDED_base_2eproto
#define PROTOBUF_INCLUDED_base_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto 

namespace protobuf_base_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_base_2eproto
class CHeatingCtrl;
class CHeatingCtrlDefaultTypeInternal;
extern CHeatingCtrlDefaultTypeInternal _CHeatingCtrl_default_instance_;
class CHomeAutoParams;
class CHomeAutoParamsDefaultTypeInternal;
extern CHomeAutoParamsDefaultTypeInternal _CHomeAutoParams_default_instance_;
class CLightingCtrl;
class CLightingCtrlDefaultTypeInternal;
extern CLightingCtrlDefaultTypeInternal _CLightingCtrl_default_instance_;
class CShadesCtrl;
class CShadesCtrlDefaultTypeInternal;
extern CShadesCtrlDefaultTypeInternal _CShadesCtrl_default_instance_;
namespace google {
namespace protobuf {
template<> ::CHeatingCtrl* Arena::CreateMaybeMessage<::CHeatingCtrl>(Arena*);
template<> ::CHomeAutoParams* Arena::CreateMaybeMessage<::CHomeAutoParams>(Arena*);
template<> ::CLightingCtrl* Arena::CreateMaybeMessage<::CLightingCtrl>(Arena*);
template<> ::CShadesCtrl* Arena::CreateMaybeMessage<::CShadesCtrl>(Arena*);
}  // namespace protobuf
}  // namespace google

enum LightOnOff {
  OFF = 0,
  ON = 1,
  LightOnOff_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LightOnOff_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LightOnOff_IsValid(int value);
const LightOnOff LightOnOff_MIN = OFF;
const LightOnOff LightOnOff_MAX = ON;
const int LightOnOff_ARRAYSIZE = LightOnOff_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightOnOff_descriptor();
inline const ::std::string& LightOnOff_Name(LightOnOff value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightOnOff_descriptor(), value);
}
inline bool LightOnOff_Parse(
    const ::std::string& name, LightOnOff* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightOnOff>(
    LightOnOff_descriptor(), name, value);
}
enum OpenUpto {
  CLOSE = 0,
  OPEN = 1,
  OpenUpto_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OpenUpto_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OpenUpto_IsValid(int value);
const OpenUpto OpenUpto_MIN = CLOSE;
const OpenUpto OpenUpto_MAX = OPEN;
const int OpenUpto_ARRAYSIZE = OpenUpto_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpenUpto_descriptor();
inline const ::std::string& OpenUpto_Name(OpenUpto value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpenUpto_descriptor(), value);
}
inline bool OpenUpto_Parse(
    const ::std::string& name, OpenUpto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpenUpto>(
    OpenUpto_descriptor(), name, value);
}
// ===================================================================

class CHeatingCtrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CHeatingCtrl) */ {
 public:
  CHeatingCtrl();
  virtual ~CHeatingCtrl();

  CHeatingCtrl(const CHeatingCtrl& from);

  inline CHeatingCtrl& operator=(const CHeatingCtrl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CHeatingCtrl(CHeatingCtrl&& from) noexcept
    : CHeatingCtrl() {
    *this = ::std::move(from);
  }

  inline CHeatingCtrl& operator=(CHeatingCtrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CHeatingCtrl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHeatingCtrl* internal_default_instance() {
    return reinterpret_cast<const CHeatingCtrl*>(
               &_CHeatingCtrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CHeatingCtrl* other);
  friend void swap(CHeatingCtrl& a, CHeatingCtrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CHeatingCtrl* New() const final {
    return CreateMaybeMessage<CHeatingCtrl>(NULL);
  }

  CHeatingCtrl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CHeatingCtrl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CHeatingCtrl& from);
  void MergeFrom(const CHeatingCtrl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHeatingCtrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // double currentTemp = 2;
  void clear_currenttemp();
  static const int kCurrentTempFieldNumber = 2;
  double currenttemp() const;
  void set_currenttemp(double value);

  // double desiredTemp = 3;
  void clear_desiredtemp();
  static const int kDesiredTempFieldNumber = 3;
  double desiredtemp() const;
  void set_desiredtemp(double value);

  // @@protoc_insertion_point(class_scope:CHeatingCtrl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double currenttemp_;
  double desiredtemp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CLightingCtrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLightingCtrl) */ {
 public:
  CLightingCtrl();
  virtual ~CLightingCtrl();

  CLightingCtrl(const CLightingCtrl& from);

  inline CLightingCtrl& operator=(const CLightingCtrl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLightingCtrl(CLightingCtrl&& from) noexcept
    : CLightingCtrl() {
    *this = ::std::move(from);
  }

  inline CLightingCtrl& operator=(CLightingCtrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CLightingCtrl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLightingCtrl* internal_default_instance() {
    return reinterpret_cast<const CLightingCtrl*>(
               &_CLightingCtrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CLightingCtrl* other);
  friend void swap(CLightingCtrl& a, CLightingCtrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLightingCtrl* New() const final {
    return CreateMaybeMessage<CLightingCtrl>(NULL);
  }

  CLightingCtrl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLightingCtrl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLightingCtrl& from);
  void MergeFrom(const CLightingCtrl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLightingCtrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .LightOnOff livingRoom = 2;
  void clear_livingroom();
  static const int kLivingRoomFieldNumber = 2;
  ::LightOnOff livingroom() const;
  void set_livingroom(::LightOnOff value);

  // .LightOnOff bedRoom = 3;
  void clear_bedroom();
  static const int kBedRoomFieldNumber = 3;
  ::LightOnOff bedroom() const;
  void set_bedroom(::LightOnOff value);

  // .LightOnOff kitchenRoom = 4;
  void clear_kitchenroom();
  static const int kKitchenRoomFieldNumber = 4;
  ::LightOnOff kitchenroom() const;
  void set_kitchenroom(::LightOnOff value);

  // @@protoc_insertion_point(class_scope:CLightingCtrl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int livingroom_;
  int bedroom_;
  int kitchenroom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CShadesCtrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CShadesCtrl) */ {
 public:
  CShadesCtrl();
  virtual ~CShadesCtrl();

  CShadesCtrl(const CShadesCtrl& from);

  inline CShadesCtrl& operator=(const CShadesCtrl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CShadesCtrl(CShadesCtrl&& from) noexcept
    : CShadesCtrl() {
    *this = ::std::move(from);
  }

  inline CShadesCtrl& operator=(CShadesCtrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CShadesCtrl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CShadesCtrl* internal_default_instance() {
    return reinterpret_cast<const CShadesCtrl*>(
               &_CShadesCtrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CShadesCtrl* other);
  friend void swap(CShadesCtrl& a, CShadesCtrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CShadesCtrl* New() const final {
    return CreateMaybeMessage<CShadesCtrl>(NULL);
  }

  CShadesCtrl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CShadesCtrl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CShadesCtrl& from);
  void MergeFrom(const CShadesCtrl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CShadesCtrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .OpenUpto state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::OpenUpto state() const;
  void set_state(::OpenUpto value);

  // int32 currentOpenPercentage = 2;
  void clear_currentopenpercentage();
  static const int kCurrentOpenPercentageFieldNumber = 2;
  ::google::protobuf::int32 currentopenpercentage() const;
  void set_currentopenpercentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CShadesCtrl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  ::google::protobuf::int32 currentopenpercentage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CHomeAutoParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CHomeAutoParams) */ {
 public:
  CHomeAutoParams();
  virtual ~CHomeAutoParams();

  CHomeAutoParams(const CHomeAutoParams& from);

  inline CHomeAutoParams& operator=(const CHomeAutoParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CHomeAutoParams(CHomeAutoParams&& from) noexcept
    : CHomeAutoParams() {
    *this = ::std::move(from);
  }

  inline CHomeAutoParams& operator=(CHomeAutoParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CHomeAutoParams& default_instance();

  enum ActionCase {
    kHeating = 2,
    kLighting = 3,
    kShades = 4,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHomeAutoParams* internal_default_instance() {
    return reinterpret_cast<const CHomeAutoParams*>(
               &_CHomeAutoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CHomeAutoParams* other);
  friend void swap(CHomeAutoParams& a, CHomeAutoParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CHomeAutoParams* New() const final {
    return CreateMaybeMessage<CHomeAutoParams>(NULL);
  }

  CHomeAutoParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CHomeAutoParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CHomeAutoParams& from);
  void MergeFrom(const CHomeAutoParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHomeAutoParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CHeatingCtrl heating = 2;
  bool has_heating() const;
  void clear_heating();
  static const int kHeatingFieldNumber = 2;
  private:
  const ::CHeatingCtrl& _internal_heating() const;
  public:
  const ::CHeatingCtrl& heating() const;
  ::CHeatingCtrl* release_heating();
  ::CHeatingCtrl* mutable_heating();
  void set_allocated_heating(::CHeatingCtrl* heating);

  // .CLightingCtrl lighting = 3;
  bool has_lighting() const;
  void clear_lighting();
  static const int kLightingFieldNumber = 3;
  private:
  const ::CLightingCtrl& _internal_lighting() const;
  public:
  const ::CLightingCtrl& lighting() const;
  ::CLightingCtrl* release_lighting();
  ::CLightingCtrl* mutable_lighting();
  void set_allocated_lighting(::CLightingCtrl* lighting);

  // .CShadesCtrl shades = 4;
  bool has_shades() const;
  void clear_shades();
  static const int kShadesFieldNumber = 4;
  private:
  const ::CShadesCtrl& _internal_shades() const;
  public:
  const ::CShadesCtrl& shades() const;
  ::CShadesCtrl* release_shades();
  ::CShadesCtrl* mutable_shades();
  void set_allocated_shades(::CShadesCtrl* shades);

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:CHomeAutoParams)
 private:
  void set_has_heating();
  void set_has_lighting();
  void set_has_shades();

  inline bool has_action() const;
  inline void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ActionUnion {
    ActionUnion() {}
    ::CHeatingCtrl* heating_;
    ::CLightingCtrl* lighting_;
    ::CShadesCtrl* shades_;
  } action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_base_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHeatingCtrl

// string name = 1;
inline void CHeatingCtrl::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CHeatingCtrl::name() const {
  // @@protoc_insertion_point(field_get:CHeatingCtrl.name)
  return name_.GetNoArena();
}
inline void CHeatingCtrl::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CHeatingCtrl.name)
}
#if LANG_CXX11
inline void CHeatingCtrl::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CHeatingCtrl.name)
}
#endif
inline void CHeatingCtrl::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CHeatingCtrl.name)
}
inline void CHeatingCtrl::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CHeatingCtrl.name)
}
inline ::std::string* CHeatingCtrl::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CHeatingCtrl.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CHeatingCtrl::release_name() {
  // @@protoc_insertion_point(field_release:CHeatingCtrl.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CHeatingCtrl::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CHeatingCtrl.name)
}

// double currentTemp = 2;
inline void CHeatingCtrl::clear_currenttemp() {
  currenttemp_ = 0;
}
inline double CHeatingCtrl::currenttemp() const {
  // @@protoc_insertion_point(field_get:CHeatingCtrl.currentTemp)
  return currenttemp_;
}
inline void CHeatingCtrl::set_currenttemp(double value) {
  
  currenttemp_ = value;
  // @@protoc_insertion_point(field_set:CHeatingCtrl.currentTemp)
}

// double desiredTemp = 3;
inline void CHeatingCtrl::clear_desiredtemp() {
  desiredtemp_ = 0;
}
inline double CHeatingCtrl::desiredtemp() const {
  // @@protoc_insertion_point(field_get:CHeatingCtrl.desiredTemp)
  return desiredtemp_;
}
inline void CHeatingCtrl::set_desiredtemp(double value) {
  
  desiredtemp_ = value;
  // @@protoc_insertion_point(field_set:CHeatingCtrl.desiredTemp)
}

// -------------------------------------------------------------------

// CLightingCtrl

// string name = 1;
inline void CLightingCtrl::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLightingCtrl::name() const {
  // @@protoc_insertion_point(field_get:CLightingCtrl.name)
  return name_.GetNoArena();
}
inline void CLightingCtrl::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLightingCtrl.name)
}
#if LANG_CXX11
inline void CLightingCtrl::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CLightingCtrl.name)
}
#endif
inline void CLightingCtrl::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLightingCtrl.name)
}
inline void CLightingCtrl::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLightingCtrl.name)
}
inline ::std::string* CLightingCtrl::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CLightingCtrl.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLightingCtrl::release_name() {
  // @@protoc_insertion_point(field_release:CLightingCtrl.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLightingCtrl::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CLightingCtrl.name)
}

// .LightOnOff livingRoom = 2;
inline void CLightingCtrl::clear_livingroom() {
  livingroom_ = 0;
}
inline ::LightOnOff CLightingCtrl::livingroom() const {
  // @@protoc_insertion_point(field_get:CLightingCtrl.livingRoom)
  return static_cast< ::LightOnOff >(livingroom_);
}
inline void CLightingCtrl::set_livingroom(::LightOnOff value) {
  
  livingroom_ = value;
  // @@protoc_insertion_point(field_set:CLightingCtrl.livingRoom)
}

// .LightOnOff bedRoom = 3;
inline void CLightingCtrl::clear_bedroom() {
  bedroom_ = 0;
}
inline ::LightOnOff CLightingCtrl::bedroom() const {
  // @@protoc_insertion_point(field_get:CLightingCtrl.bedRoom)
  return static_cast< ::LightOnOff >(bedroom_);
}
inline void CLightingCtrl::set_bedroom(::LightOnOff value) {
  
  bedroom_ = value;
  // @@protoc_insertion_point(field_set:CLightingCtrl.bedRoom)
}

// .LightOnOff kitchenRoom = 4;
inline void CLightingCtrl::clear_kitchenroom() {
  kitchenroom_ = 0;
}
inline ::LightOnOff CLightingCtrl::kitchenroom() const {
  // @@protoc_insertion_point(field_get:CLightingCtrl.kitchenRoom)
  return static_cast< ::LightOnOff >(kitchenroom_);
}
inline void CLightingCtrl::set_kitchenroom(::LightOnOff value) {
  
  kitchenroom_ = value;
  // @@protoc_insertion_point(field_set:CLightingCtrl.kitchenRoom)
}

// -------------------------------------------------------------------

// CShadesCtrl

// .OpenUpto state = 1;
inline void CShadesCtrl::clear_state() {
  state_ = 0;
}
inline ::OpenUpto CShadesCtrl::state() const {
  // @@protoc_insertion_point(field_get:CShadesCtrl.state)
  return static_cast< ::OpenUpto >(state_);
}
inline void CShadesCtrl::set_state(::OpenUpto value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:CShadesCtrl.state)
}

// int32 currentOpenPercentage = 2;
inline void CShadesCtrl::clear_currentopenpercentage() {
  currentopenpercentage_ = 0;
}
inline ::google::protobuf::int32 CShadesCtrl::currentopenpercentage() const {
  // @@protoc_insertion_point(field_get:CShadesCtrl.currentOpenPercentage)
  return currentopenpercentage_;
}
inline void CShadesCtrl::set_currentopenpercentage(::google::protobuf::int32 value) {
  
  currentopenpercentage_ = value;
  // @@protoc_insertion_point(field_set:CShadesCtrl.currentOpenPercentage)
}

// -------------------------------------------------------------------

// CHomeAutoParams

// .CHeatingCtrl heating = 2;
inline bool CHomeAutoParams::has_heating() const {
  return action_case() == kHeating;
}
inline void CHomeAutoParams::set_has_heating() {
  _oneof_case_[0] = kHeating;
}
inline void CHomeAutoParams::clear_heating() {
  if (has_heating()) {
    delete action_.heating_;
    clear_has_action();
  }
}
inline const ::CHeatingCtrl& CHomeAutoParams::_internal_heating() const {
  return *action_.heating_;
}
inline ::CHeatingCtrl* CHomeAutoParams::release_heating() {
  // @@protoc_insertion_point(field_release:CHomeAutoParams.heating)
  if (has_heating()) {
    clear_has_action();
      ::CHeatingCtrl* temp = action_.heating_;
    action_.heating_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CHeatingCtrl& CHomeAutoParams::heating() const {
  // @@protoc_insertion_point(field_get:CHomeAutoParams.heating)
  return has_heating()
      ? *action_.heating_
      : *reinterpret_cast< ::CHeatingCtrl*>(&::_CHeatingCtrl_default_instance_);
}
inline ::CHeatingCtrl* CHomeAutoParams::mutable_heating() {
  if (!has_heating()) {
    clear_action();
    set_has_heating();
    action_.heating_ = CreateMaybeMessage< ::CHeatingCtrl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CHomeAutoParams.heating)
  return action_.heating_;
}

// .CLightingCtrl lighting = 3;
inline bool CHomeAutoParams::has_lighting() const {
  return action_case() == kLighting;
}
inline void CHomeAutoParams::set_has_lighting() {
  _oneof_case_[0] = kLighting;
}
inline void CHomeAutoParams::clear_lighting() {
  if (has_lighting()) {
    delete action_.lighting_;
    clear_has_action();
  }
}
inline const ::CLightingCtrl& CHomeAutoParams::_internal_lighting() const {
  return *action_.lighting_;
}
inline ::CLightingCtrl* CHomeAutoParams::release_lighting() {
  // @@protoc_insertion_point(field_release:CHomeAutoParams.lighting)
  if (has_lighting()) {
    clear_has_action();
      ::CLightingCtrl* temp = action_.lighting_;
    action_.lighting_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CLightingCtrl& CHomeAutoParams::lighting() const {
  // @@protoc_insertion_point(field_get:CHomeAutoParams.lighting)
  return has_lighting()
      ? *action_.lighting_
      : *reinterpret_cast< ::CLightingCtrl*>(&::_CLightingCtrl_default_instance_);
}
inline ::CLightingCtrl* CHomeAutoParams::mutable_lighting() {
  if (!has_lighting()) {
    clear_action();
    set_has_lighting();
    action_.lighting_ = CreateMaybeMessage< ::CLightingCtrl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CHomeAutoParams.lighting)
  return action_.lighting_;
}

// .CShadesCtrl shades = 4;
inline bool CHomeAutoParams::has_shades() const {
  return action_case() == kShades;
}
inline void CHomeAutoParams::set_has_shades() {
  _oneof_case_[0] = kShades;
}
inline void CHomeAutoParams::clear_shades() {
  if (has_shades()) {
    delete action_.shades_;
    clear_has_action();
  }
}
inline const ::CShadesCtrl& CHomeAutoParams::_internal_shades() const {
  return *action_.shades_;
}
inline ::CShadesCtrl* CHomeAutoParams::release_shades() {
  // @@protoc_insertion_point(field_release:CHomeAutoParams.shades)
  if (has_shades()) {
    clear_has_action();
      ::CShadesCtrl* temp = action_.shades_;
    action_.shades_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CShadesCtrl& CHomeAutoParams::shades() const {
  // @@protoc_insertion_point(field_get:CHomeAutoParams.shades)
  return has_shades()
      ? *action_.shades_
      : *reinterpret_cast< ::CShadesCtrl*>(&::_CShadesCtrl_default_instance_);
}
inline ::CShadesCtrl* CHomeAutoParams::mutable_shades() {
  if (!has_shades()) {
    clear_action();
    set_has_shades();
    action_.shades_ = CreateMaybeMessage< ::CShadesCtrl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CHomeAutoParams.shades)
  return action_.shades_;
}

inline bool CHomeAutoParams::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void CHomeAutoParams::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline CHomeAutoParams::ActionCase CHomeAutoParams::action_case() const {
  return CHomeAutoParams::ActionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LightOnOff> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LightOnOff>() {
  return ::LightOnOff_descriptor();
}
template <> struct is_proto_enum< ::OpenUpto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OpenUpto>() {
  return ::OpenUpto_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_base_2eproto
