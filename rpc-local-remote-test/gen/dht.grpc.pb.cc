// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dht.proto

#include "dht.pb.h"
#include "dht.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* DhtConfigHandler_method_names[] = {
  "/DhtConfigHandler/Config",
};

std::unique_ptr< DhtConfigHandler::Stub> DhtConfigHandler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DhtConfigHandler::Stub> stub(new DhtConfigHandler::Stub(channel));
  return stub;
}

DhtConfigHandler::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Config_(DhtConfigHandler_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DhtConfigHandler::Stub::Config(::grpc::ClientContext* context, const ::CDhtConfigReq& request, ::CDhtConfigCnf* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Config_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::CDhtConfigCnf>* DhtConfigHandler::Stub::AsyncConfigRaw(::grpc::ClientContext* context, const ::CDhtConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CDhtConfigCnf>::Create(channel_.get(), cq, rpcmethod_Config_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CDhtConfigCnf>* DhtConfigHandler::Stub::PrepareAsyncConfigRaw(::grpc::ClientContext* context, const ::CDhtConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CDhtConfigCnf>::Create(channel_.get(), cq, rpcmethod_Config_, context, request, false);
}

DhtConfigHandler::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DhtConfigHandler_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DhtConfigHandler::Service, ::CDhtConfigReq, ::CDhtConfigCnf>(
          std::mem_fn(&DhtConfigHandler::Service::Config), this)));
}

DhtConfigHandler::Service::~Service() {
}

::grpc::Status DhtConfigHandler::Service::Config(::grpc::ServerContext* context, const ::CDhtConfigReq* request, ::CDhtConfigCnf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


